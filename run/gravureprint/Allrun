#!/bin/bash

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Source more run functions
. scripts/moreRunFunctions

maxRefinement=`getMaxRefinementLevels`
echo $maxRefinement

nProcs=`getNumberOfProcessors`

refinementInterval=`getRefinementInterval`

`setRefinementIntervalForMeshUpdate`

application="interLBDyMFoam"
processorNumber="2"

echo "********************Converting Salome meshes****************"

# make dummy cases for the rotor and stator meshes
mkdir -p Salome/rotor/ && cp -r constant/ Salome/rotor/ && cp -r system/ Salome/rotor/
mkdir -p Salome/stator/ && cp -r constant/ Salome/stator/ && cp -r system/ Salome/stator/

# go to rotor mesh dummy case 
cd Salome/rotor/
# convert Salome mesh to foam mesh
runApplication ideasUnvToFoam  ../Layer_Mesh_Rotor.unv

# creates face and cell sets according to batch script (protect hex Cells from polyDualMesh)
runApplication setSet -noVTK -batch ../../scripts/setSetHexCells.batch
# creates zones out of the previous defined sets
runApplication setsToZones -noFlipMap

# convert tet-mesh to poly-mesh
runApplication polyDualMesh -concaveMultiCells -overwrite 50

# delete face and cell zones and sets again (delete extension .gz if uncompressed writing is used)
rm -r constant/polyMesh/sets
rm constant/polyMesh/faceZones
rm constant/polyMesh/cellZones

# make a 2d mesh out of the 3d mesh
runApplication extrudeMesh
# define new patches
runApplication autoPatch -overwrite 90
mv system/createPatchDict_rotor system/createPatchDict
runApplication createPatch -overwrite


# go to stator mesh dummy case 
cd ../stator/
# convert Salome mesh to foam mesh
runApplication ideasUnvToFoam  ../Layer_Mesh_Stator.unv

# creates face and cell sets according to batch script (protect hex Cells from polyDualMesh)
runApplication setSet -noVTK -batch ../../scripts/setSetHexCells.batch
# creates zones out of the previous defined sets
runApplication setsToZones -noFlipMap

# convert tet-mesh to poly-mesh
runApplication polyDualMesh -concaveMultiCells -overwrite 50

# delete face and cell zones and sets again (delete extension .gz if uncompressed writing is used)
rm -r constant/polyMesh/sets
rm constant/polyMesh/faceZones
rm constant/polyMesh/cellZones

# make a 2d mesh out of the 3d mesh
runApplication extrudeMesh
# define new patches
runApplication autoPatch -overwrite 20
mv system/createPatchDict_stator system/createPatchDict
runApplication createPatch -overwrite

# go back to main case
cd ../..

echo "****************Finished converting Salome meshes***********" 
echo ""
echo ""
echo "***********************Merging meshes***********************"
#merge meshes
runApplication mergeMeshes . Salome/rotor . Salome/stator

# copy created Mesh from rotor directory to the constant directory of the main case
deltaT=$(sed -n -e '/deltaT/,/;/ {
			s/;.*//
			s/deltaT\t*//p
		}' system/controlDict)
cp -r Salome/rotor/$deltaT/polyMesh constant
echo "****************Finished mering meshes**********************"
echo ""
echo ""
echo "****************Setting boundary conditions*****************"
# set boundary settings
cd scripts
./setBoundaryConditions
cd ..
echo "****************Finished setting boundary conditions********"
echo ""
echo ""
echo "**********************Checking mesh quality*****************"
# check mesh quality
runApplication checkMesh
echo "****************Finished checking mesh quality**************"
echo ""
echo ""
echo "***********************Preparing GGI************************"
# creates face and cell sets according to batch script
runApplication setSet -batch scripts/setSet.batch

# creates zones out of the previous defined sets
runApplication setsToZones -noFlipMap
echo "****************Finished preparing GGI*********************"
echo ""
echo ""
echo "******************Setting initial fields*******************"
# copy origianl zero directory to a zero directory where setField can apply changes
cp -r 0.org 0

# set initial fields and refine mesh
#for i in $( seq 0 $maxRefinement )
#do
#  runApplication -a setFields #-time 0

#  runApplication -a updateMesh -overwrite
#done

runApplication -a setFields #-time 0
echo "****************Finished setting initial fields************"
echo ""
echo ""
echo "********************Running simulation*********************"
runApplication interLBDyMFoam
#runApplication decomposePar -cellDist

#remove pointLevel and cellLevel files from processor directories
#for i in $( seq 0 $(expr $processorNumber - 1))
#do
#	rm processor$i/constant/polyMesh/pointLevel
#	rm processor$i/constant/polyMesh/cellLevel
#done

#MPIRUN_OPTIONS="--bind-to core --map-by core --report-bindings"

#runParallel interLBDyMFoam
#mpirun $MPIRUN_OPTIONS -np $processorNumber interLBDyMFoam -parallel > log.interLBDyMFoam

echo "****************Finished running simulation****************"