/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      dynamicMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

/*dynamicFvMesh staticFvMesh;*/

/*dynamicFvMesh interfaceTrackingFvMesh;*/

dynamicFvMesh interfaceTrackingLBDyPolyRefineFvMesh; 

solver velocityLaplacian;

diffusivity quadratic inverseDistance 1(interface);

frozenDiffusion yes;

twoDMotion yes;

distancePatches 1 (interface);


interfaceTrackingFvMeshCoeffs
{
    movingSurfacePatches
    (
        interface
        {
            neighbourPatch   interfaceShadow;
            neighbourMesh    fluidB;

            normalMotionDir yes;

            // motion direction if normalMotionDir is no
            motionDir (0 1 0);

            fixedSurfacePatches 0();

/*            interfaceDeformationLimit interfaceDeformationLimit [ 0 0 0 0 0 0 0 ] 0.0005;*/

            interpolatorUpdateFrequency 1;

            pointNormalsCorrectionPatches 0();

            interfaceTransferMethod directMap; //GGI; 

            directMapCoeffs{}

            GGICoeffs{}

            smoothing yes;

            smoothSurfaceMeshCoeffs
            {
                smoothingFrequency 2;
                smoothingTolerance 1e-4;
            }

        }
    );
}

dynamicRefineFvMeshCoeffs
{
    // Global refinement configuration

    // Maximum refinement level
    maxRefinementLevel   2;

    // Refine every refineInterval step
    refineInterval   2;

    // Unrefine every unrefineInterval step
    unrefineInterval 2;

    // Separate refinement/unrefinement steps. In case this is switched on,
    // if both refinement and unrefinement should have been performed in a
    // single step, unrefinement is skipped. Switched off by default, meaning
    // that it should be safe to perform both at the same time
    separateUpdates false;

    // Dynamic mesh procedure controls

    // Polyhedral refinement engine controls
    active yes;

    // Maximum number of cells to allow (not strictly controlled)
    maxCells             2000000;

    // Number of buffer layers between refinement levels
    nRefinementBufferLayers        1;

    // Number of buffer layers for unrefinement in order to run away from the
    // region that is getting refined at the same time in order to avoid point
    // level inconsistencies
    nUnrefinementBufferLayers      3;

    // Whether to use edge based consistency check. Needed when one allows more
    // than 2 refinement levels (automatically switched on)
    edgeBasedConsistency           yes;

    refinements
    (
        /*refineBasedOnVorticity
        {
            // Refinement-specific configuration

            // Refinement selection criteria
            refinementSelection
            {
                // Refines around field interface
                type        regionInterfaceProtectedFieldCurlRefinement;
                fieldName   U;
                protectedInterfaceName interface;
                lowerBound  100;
                upperBound  1e4;


                // Whether to use cell-point-cell smoothing for selecting refinement
                // candidates. Off by default
                cellPointCellSmoothing off;
            }
        }*/

        refineBasedOnPatchDistance
        {
            // Refinement selection criteria
            refinementSelection
            {
                type        codedFieldBoundsRefinement;
                fieldName   patchDistance;
                lowerBound  0.0009;
                upperBound  0.001;
                distancePatches (interface);
        
                // Whether to use cell-point-cell smoothing for selecting
                // refinement candidates. Off by default
                cellPointCellSmoothing on;
        
                codeInclude
                #{
                    #include "volFields.H"
                    #include "patchWave.H"
                    #include "polyPatchID.H"
                #};
        
                code
                #{
                    Info << "*** dynamicCode ***" << endl;

                    // Read patch names from dictionary
                    const wordList patchNames(coeffDict().lookup("distancePatches"));

                    // Collect patchIDs into a hash set
                    labelHashSet patchIDs(patchNames.size());
                    forAll (patchNames, patchI)
                    {
                        // Get polyPatchID
                        const polyPatchID pID(patchNames[patchI], mesh().boundaryMesh());

                        if (pID.active())
                        {
                            patchIDs.insert(pID.index());
                        }
                        else
                        {
                            FatalIOErrorIn
                            (
                                "Xfer<labelList> minPatchDistanceRefinement::"
                                "refinenementPatchCandidates() const",
                                coeffDict()
                            )   << "Cannot find patch " << patchNames[patchI]
                                << " in the mesh." << nl
                                << "Available patches are: " << mesh().boundaryMesh().names()
                                << abort(FatalIOError);
                        }
                    }

                    patchWave waveDistance(mesh(), patchIDs, false);
                    const scalarField& patchDistance = waveDistance.distance();

                    scalar maxPatchDistance = gMax(patchDistance);
                    scalar minPatchDistance = gMin(patchDistance);

                    Info << "max patchDistance: " << maxPatchDistance << endl;
                    Info << "min patchDistance: " << minPatchDistance << endl;
                    
                    field_.internalField() = patchDistance;

                    field_.write();
                    mesh().write();
                #};
        
                codeLibs
                #{
                    -lmeshTools 
                #};
        
                codeOptions
                #{
                    -I$(LIB_SRC)/meshTools/lnInclude
                #};
            }
        }
    );
}

loadBalanceFvMeshCoeffs
{
    // Load Balancing

    imbalanceTrigger 1;

    numberOfSubdomains 4;

    method          scotch;

    scotchCoeffs
    {
        processorWeights (1 1 1 1);
    }

    simpleCoeffs
    {
        n       ( 1 2 2 );
        delta   0.001;
    }
}


// ************************************************************************* //
